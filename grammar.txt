%token DECLARE id BOOLEAN CHAR num NUMBER INT SMALLINT POSITIVE BEGIN END NULL DBMS_OUTPUT.PUT_LINE DBMS_OUTPUT.PUT DBMS_OUTPUT.NEW_LINE IF THEN END WHILE LOOP TRUE FALSE NULL NOT MOD
%%
block: declarations compound_statement '$'
;
declarations: DECLARE declare_rest 
| 
;
declare_rest: id data_type default ';' declare_rest
| 
;
default: ':=' righthandside
| 
;
data_type: characters
| numbers
| BOOLEAN 
;
characters: CHAR 
;
size: num size_option
| 
;
size_option: ',' num
| 
;
numbers: NUMBER '(' size ')'
| INT '(' size ')'
| SMALLINT '(' size ')'
| POSITIVE '(' size ')' 
;
compound_statement: BEGIN optional_statements END ';' 
;
optional_statements: NULL ';'
| statement_list 
;
statement_list: statement
| statement_list ';' statement 
;
statement: lefthandside
| compound_statement
| DBMS_OUTPUT.PUT_LINE '(' id ')'
| DBMS_OUTPUT.PUT '(' id ')'
| DBMS_OUTPUT.NEW_LINE
| '&' id
| IF expression THEN statement END IF
| WHILE expression LOOP statement END LOOP 
;
lefthandside: id ':=' righthandside 
;
righthandside: expression
| 'c' 
;
expression: simple_expression
| simple_expression relop simple_expression 
;
simple_expression: term
| simple_expression addop term 
;
term: factor
| term mulop factor 
;
factor: id
| num
| TRUE
| FALSE
| NULL
| NOT factor 
;
relop: '>'
| '>='
| '='
| '<='
| '<'
| '<>' 
;
addop: '+'
| '-' 
;
mulop: '*'
| '/'
| MOD 
;